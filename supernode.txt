#include "supernode.h"
#include <time.h>

SuperNode* create_supernode(KaleidoscopeEngine* k_engine, 
                          MirroredNetwork* m_network,
                          MemoryGraph* memory) {
    SuperNode* node = (SuperNode*)malloc(sizeof(SuperNode));
    if (!node) return NULL;
    
    node->id = (uint64_t)time(NULL);
    node->k_engine = k_engine;
    node->m_network = m_network;
    node->memory = memory;
    node->confidence_score = 0.0f;
    node->adaptation_level = 1;
    
    return node;
}

void process_data_through_supernode(SuperNode* node, const char* data) {
    if (!node || !data) return;
    
    // Process through Kaleidoscope Engine
    process_task(node->k_engine, data);
    
    // Generate mirror speculation
    generate_suggestion(node->m_network, data);
    
    // Update memory graph
    MemoryNode* mem_node = create_memory_node(data, 
                                            node->adaptation_level);
    add_memory_node(node->memory, mem_node);
    
    // Update confidence based on cross-validation
    node->confidence_score = validate_speculation(node, data);
}

float validate_speculation(SuperNode* node, const char* data) {
    float confidence = 0.0f;
    
    // Compare Kaleidoscope insights with Mirror suggestions
    // This is where the magic happens - cross-validation
    for (uint64_t i = 0; i < node->m_network->suggestion_count; i++) {
        Suggestion* sug = &node->m_network->suggestions[i];
        if (strstr(sug->description, data)) {
            confidence += 0.1f;
        }
    }
    
    return confidence;
}