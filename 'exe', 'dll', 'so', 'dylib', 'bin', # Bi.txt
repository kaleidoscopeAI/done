        'exe', 'dll', 'so', 'dylib', 'bin',  # Binaries        'py', 'js', 'ts', 'java', 'c', 'cpp', 'h', 'hpp', 'cs', 'go',  # Source code        'jar', 'war', 'zip', 'tar', 'gz', 'tgz',  # Archives        'md', 'txt', 'json', 'xml'  # Documentation and data    }    return '.' in filename and filename.rsplit('.', 1)[1].lower() in allowed_extensionsdef worker_loop():    """Background worker thread to process tasks"""    global current_task, running        while running:        try:            # Get a task from the queue            task = task_queue.get(timeout=1.0)                        # Update current task            current_task = task            current_task["status"] = "processing"                        # Process based on task type            if task["type"] == "ingest":                worker_ingest(task)            elif task["type"] == "mimic":                worker_mimic(task)            else:                logger.error(f"Unknown task type: {task['type']}")                task["status"] = "error"                task["error"] = f"Unknown task type: {task['type']}"                        # Task complete            current_task = None            task_queue.task_done()                    except queue.Empty:            # No tasks in queue            pass        except Exception as e:            logger.error(f"Error in worker thread: {str(e)}", exc_info=True)            if current_task:                current_task["status"] = "error"                current_task["error"] = str(e)                current_task = Nonedef worker_ingest(task):    """    Worker function to ingest software        Args:        task: Task information    """    try:        logger.info(f"Processing ingestion task: {task['id']}")        file_path = task["file_path"]                # Call the core ingestion function        result = kaleidoscope.ingest_software(file_path)                # Update task with results        task["result"] = result        task["status"] = "completed" if result["status"] == "completed" else "error"                if result["status"] != "completed":            task["error"] = result.get("error", "Ingestion failed")                logger.info(f"Completed ingestion task {task['id']} with status: {task['status']}")            except Exception as e:        logger.error(f"Error processing ingestion task: {str(e)}", exc_info=True)        task["status"] = "error"        task["error"] = str(e)def worker_mimic(task):    """    Worker function to mimic software        Args:        task: Task information    """    try:        logger.info(f"Processing mimic task: {task['id']}")        spec_path = task["spec_path"]        target_language = task["target_language"]                # Call the core mimic function        result = kaleidoscope.mimic_software([spec_path], target_language)                # Update task with results        task["result"] = result        task["status"] = "completed" if result["status"] == "completed" else "error"                if result["status"] != "completed":            task["error"] = result.get("error", "Mimicry failed")                logger.info(f"Completed mimic task {task['id']} with status: {task['status']}")            except Exception as e: