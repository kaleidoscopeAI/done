#include "learning_feedback.h"
#include <stdlib.h>
#include <stdio.h>
#include <math.h>

// Initialize a learning feedback system
LearningFeedbackSystem* init_learning_feedback_system(uint64_t max_scores, double learning_rate) {
    LearningFeedbackSystem* system = (LearningFeedbackSystem*)malloc(sizeof(LearningFeedbackSystem));
    if (!system) {
        fprintf(stderr, "Failed to allocate memory for learning feedback system\n");
        return NULL;
    }
    
    system->score_history = (double*)calloc(max_scores, sizeof(double));
    if (!system->score_history) {
        fprintf(stderr, "Failed to allocate memory for score history\n");
        free(system);
        return NULL;
    }
    
    system->score_count = 0;
    system->max_scores = max_scores;
    system->learning_rate = learning_rate;
    system->base_learning_rate = learning_rate;
    
    return system;
}

// Record a feedback score
void record_feedback(LearningFeedbackSystem* system, double score) {
    if (!system) return;
    
    // If we've reached maximum capacity, shift all scores down
    if (system->score_count == system->max_scores) {
        for (uint64_t i = 0; i < system->max_scores - 1; i++) {
            system->score_history[i] = system->score_history[i + 1];
        }
        system->score_count--;
    }
    
    // Add new score at the end
    system->score_history[system->score_count] = score;
    system->score_count++;
}

// Calculate adjusted learning rate based on feedback history
double calculate_adjusted_learning_rate(LearningFeedbackSystem* system) {
    if (!system || system->score_count < 2) 
        return system->base_learning_rate;
    
    // Calculate trend in scores
    double avg_score = 0.0;
    for (uint64_t i = 0; i < system->score_count; i++) {
        avg_score += system->score_history[i];
    }
    avg_score /= system->score_count;
    
    // Simple adjustment: if recent scores are improving, increase learning rate
    double recent_avg = 0.0;
    uint64_t recent_count = system->score_count >= 3 ? 3 : system->score_count;
    for (uint64_t i = system->score_count - recent_count; i < system->score_count; i++) {
        recent_avg += system->score_history[i];
    }
    recent_avg /= recent_count;
    
    // Adjust learning rate based on trend
    double adjustment = 1.0;
    if (recent_avg > avg_score) {
        // Scores improving, increase learning rate
        adjustment = 1.1;
    } else if (recent_avg < avg_score) {
        // Scores worsening, decrease learning rate
        adjustment = 0.9;
    }
    
    // Calculate adjusted rate, constrained within reasonable bounds
    double adjusted_rate = system->base_learning_rate * adjustment;
    if (adjusted_rate < 0.001) adjusted_rate = 0.001;
    if (adjusted_rate > 0.1) adjusted_rate = 0.1;
    
    return adjusted_rate;
}

// Apply the adjusted learning rate to a learning model
void apply_learning_rate(double* learning_model, double adjustment) {
    if (!learning_model) return;
    
    *learning_model *= adjustment;
}

// Destroy the learning feedback system and free resources
void destroy_learning_feedback_system(LearningFeedbackSystem* system) {
    if (!system) return;
    
    if (system->score_history) {
        free(system->score_history);
    }
    
    free(system);
}

