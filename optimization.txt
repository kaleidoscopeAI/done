#include "optimization.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Initialize optimizer
Optimizer* init_optimizer(void) {
    Optimizer* optimizer = (Optimizer*)malloc(sizeof(Optimizer));
    if (!optimizer) return NULL;
    
    optimizer->learning_rate = 0.01;
    optimizer->iteration_count = 0;
    optimizer->optimizer_data = NULL;
    
    printf("Optimizer initialized with learning rate %f\n", optimizer->learning_rate);
    return optimizer;
}

// Optimize pattern result
void optimize_result(Optimizer* optimizer, PatternResult* result) {
    if (!optimizer || !result) return;
    
    // Increment iteration count for tracking
    optimizer->iteration_count++;
    
    // Free previous optimized data if it exists
    if (result->optimized_data) {
        free(result->optimized_data);
    }
    
    // Create new optimized data
    char buffer[1024];
    snprintf(buffer, sizeof(buffer), "Optimized (iter %lu, rate %f): %s", 
             optimizer->iteration_count, optimizer->learning_rate, 
             result->processed_data ? result->processed_data : "null");
    
    result->optimized_data = strdup(buffer);
    
    // Boost confidence score after optimization
    result->confidence_score += 5;
    if (result->confidence_score > 100) {
        result->confidence_score = 100;
    }
    
    printf("Optimized result: %s (confidence: %lu%%)\n", 
           result->optimized_data, result->confidence_score);
}

// Destroy optimizer
void destroy_optimizer(Optimizer* optimizer) {
    if (optimizer) {
        if (optimizer->optimizer_data) {
            free(optimizer->optimizer_data);
        }
        free(optimizer);
        printf("Optimizer destroyed\n");
    }
}
